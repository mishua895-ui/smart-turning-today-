import telebot
import os
import psycopg2
from psycopg2 import sql
from datetime import datetime
import pytz

# --- рзз. ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DATABASE_URL = os.environ.get('DATABASE_URL')
ADMIN_ID = os.environ.get('ADMIN_ID')

# --- рзи. ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
TASK_REWARD = 5.00
REFERRAL_BONUS = 2.00
MIN_WITHDRAWAL = 100.00
TIMEZONE = 'Asia/Dhaka'

# тЬЕ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓ржЧрзБрж▓рзЛрж░ рждрж╛рж▓рж┐ржХрж╛
REQUIRED_CHANNELS = ['@SmartEarnOfficial', '@SmartEarnUpdates']

# --- рзй. ржмржЯ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ---
bot = telebot.TeleBot(BOT_TOKEN)


# --- рзк. ржбрж╛ржЯрж╛ржмрзЗрж╕ ржХрж╛ржирзЗржХрж╢ржи ---
def get_db_connection():
    try:
        if not DATABASE_URL:
            print("тЭМ DATABASE_URL missing")
            return None
        return psycopg2.connect(DATABASE_URL)
    except Exception as e:
        print(f"тЭМ Database Error: {e}")
        return None


# --- рзл. ржЗржЙржЬрж╛рж░ ржЪрзЗржХ ржлрж╛ржВрж╢ржи ---
def check_user(user_id, username=None, referrer_id=None):
    conn = get_db_connection()
    if conn is None:
        return None
    try:
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM users WHERE user_id=%s", (user_id,))
        data = cur.fetchone()

        if data is None:
            cur.execute("INSERT INTO users (user_id, username) VALUES (%s, %s)", (user_id, username))
            conn.commit()

            # Referral Bonus
            if referrer_id:
                cur.execute("""
                    UPDATE users SET referral_count = referral_count + 1, earning_balance = earning_balance + %s 
                    WHERE user_id = %s
                """, (REFERRAL_BONUS, referrer_id))
                conn.commit()

            return {'new_user': True}
        else:
            return {'new_user': False}
    finally:
        conn.close()


# --- рзм. ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржлрж╛ржВрж╢ржи ---
def get_user_data(user_id):
    conn = get_db_connection()
    if conn is None:
        return None
    try:
        cur = conn.cursor()
        cur.execute("SELECT earning_balance, referral_count FROM users WHERE user_id=%s", (user_id,))
        data = cur.fetchone()
        if data:
            return {'earning_balance': data[0], 'referral_count': data[1]}
        return None
    finally:
        conn.close()


# --- ЁЯФН ржЪрзНржпрж╛ржирзЗрж▓ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржЪрзЗржХ ---
def is_user_subscribed(user_id):
    not_joined = []
    for channel in REQUIRED_CHANNELS:
        try:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked']:
                not_joined.append(channel)
        except Exception as e:
            print(f"тЪая╕П Error checking {channel}: {e}")
            not_joined.append(channel)
    return not_joined


# --- ЁЯзн START COMMAND ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    referrer_id = None

    # рж░рзЗржлрж╛рж░рзЗрж▓ ржЪрзЗржХ
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            if referrer_id == user_id:
                referrer_id = None
        except:
            referrer_id = None

    check_user(user_id, username, referrer_id)

    # ЁЯФН ржЪрзНржпрж╛ржирзЗрж▓ ржЪрзЗржХ
    not_joined = is_user_subscribed(user_id)

    if not_joined:
        text = "ЁЯЪл ржжрзБржГржЦрж┐ржд! ржЖржкржирж┐ ржирж┐ржЪрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓ржЧрзБрж▓рзЛрждрзЗ ржПржЦржирзЛ ржпрзЛржЧ ржжрзЗржиржирж┐:\n\n"
        for ch in not_joined:
            text += f"тЮбя╕П {ch}\n"
        text += "\nрж╕ржм ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рж╛рж░ ржкрж░ ржирж┐ржЪрзЗрж░ ржмрзЛрждрж╛ржоржЯрж┐ ржЪрж╛ржкрзБржи ЁЯСЗ"

        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("тЬЕ Check Again"))
        bot.send_message(user_id, text, reply_markup=markup)
        return

    # тЬЕ рж╕ржм ржарж┐ржХ ржерж╛ржХрж▓рзЗ ржорзЗржЗржи ржорзЗржирзБ
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton('ЁЯТ░ Earning'),
        telebot.types.KeyboardButton('ЁЯТ╕ Withdraw'),
        telebot.types.KeyboardButton('ЁЯСе Referral'),
        telebot.types.KeyboardButton('ЁЯУК Balance')
    )
    bot.send_message(user_id, "ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржПржЦржи ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред", reply_markup=markup)


# --- тЬЕ Check Again ржмрж╛ржЯржи ---
@bot.message_handler(func=lambda m: m.text == "тЬЕ Check Again")
def handle_check_again(message):
    user_id = message.from_user.id
    not_joined = is_user_subscribed(user_id)

    if not_joined:
        text = "ЁЯЪл ржЖржкржирж┐ ржПржЦржирзЛ рж╕ржм ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрзЗржиржирж┐:\n"
        for ch in not_joined:
            text += f"тЮбя╕П {ch}\n"
        bot.send_message(user_id, text)
    else:
        handle_start(message)


# --- ЁЯТ░ Earning ---
@bot.message_handler(regexp='ЁЯТ░ Earning')
def handle_earning(message):
    user_id = message.from_user.id
    conn = get_db_connection()
    if conn is None:
        return bot.send_message(user_id, "тЭМ ржбрж╛ржЯрж╛ржмрзЗрж╕ рждрзНрж░рзБржЯрж┐ред")

    try:
        cur = conn.cursor()
        cur.execute("UPDATE users SET earning_balance = earning_balance + %s WHERE user_id = %s", (TASK_REWARD, user_id))
        conn.commit()

        user_data = get_user_data(user_id)
        balance = user_data['earning_balance']
        bot.send_message(user_id, f"тЬЕ ржЖржкржирж┐ тВ╣{TASK_REWARD:.2f} ржЖржпрж╝ ржХрж░рзЗржЫрзЗржи!\nЁЯТ░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: тВ╣{balance:.2f}")
    finally:
        conn.close()


# --- ЁЯУК Balance ---
@bot.message_handler(regexp='ЁЯУК Balance')
def handle_balance(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        bot.send_message(user_id, f"ЁЯУК ржмрзНржпрж╛рж▓рзЗржирзНрж╕: тВ╣{user_data['earning_balance']:.2f}\nЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: {user_data['referral_count']}")
    else:
        bot.send_message(user_id, "тЭМ ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржжрж┐ржиред")


# --- ЁЯСе Referral ---
@bot.message_handler(regexp='ЁЯСе Referral')
def handle_referral(message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/SmartEarnbdBot?start={user_id}"
    text = f"ЁЯСе ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n`{referral_link}`\n\nржкрзНрж░рждрзНржпрзЗржХ рж░рзЗржлрж╛рж░рзЗ тВ╣{REFERRAL_BONUS} ржкрж╛ржмрзЗржиред"
    bot.send_message(user_id, text, parse_mode="Markdown")


# --- ЁЯТ╕ Withdraw ---
@bot.message_handler(regexp='ЁЯТ╕ Withdraw')
def handle_withdraw(message):
    bot.send_message(message.chat.id, "ЁЯТ│ Withdraw рж╕рж┐рж╕рзНржЯрзЗржо ржЖржЧрзЗрж░ ржорждржЗ ржХрж╛ржЬ ржХрж░ржмрзЗред (Bkash/Nagad/Rocket)")

# --- ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи ---
if __name__ == '__main__':
    print("тЬЕ Bot is running with Channel Check...")
    bot.polling(none_stop=True)
