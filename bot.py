import telebot
import os
import psycopg2
from psycopg2 import sql
from datetime import datetime, timedelta
import pytz

# --- рзз. ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ---
# ржЖржкржирж╛рж░ рж╕ржм ржЧрзЛржкржи ржбрзЗржЯрж╛ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛ рж╣ржмрзЗред
# Render-ржП рж╕ржарж┐ржХ ржорж╛ржиржЧрзБрж▓рзЛ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛, рждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи
BOT_TOKEN = os.environ.get('BOT_TOKEN')
# ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ URL (рж╕ржВрж╢рзЛржзрж┐ржд: &channel_binding=require ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ)
DATABASE_URL = os.environ.get('DATABASE_URL')
# ржЕрзНржпрж╛ржбржорж┐ржи ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐
ADMIN_ID = os.environ.get('ADMIN_ID')

# ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
TASK_REWARD = 5.00  # ржкрзНрж░рждрж┐ ржЯрж╛рж╕рзНржХрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╛ржкрзНржд ржЯрж╛ржХрж╛
REFERRAL_BONUS = 2.00  # ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗ ржкрзНрж░рж╛ржкрзНржд ржЯрж╛ржХрж╛
MIN_WITHDRAWAL = 100.00  # рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ
TIMEZONE = 'Asia/Dhaka'  # рж╕ржоржпрж╝ ржЕржЮрзНржЪрж▓ (ржЖржкржирж╛рж░ ржжрзЗрж╢рзЗрж░ рж╕ржорзЯ ржЕржирзБржпрж╛рзЯрзА)

# --- рзи. ржмржЯ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- рзй. ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржлрж╛ржВрж╢ржи ---
def get_db_connection():
    conn = None
    try:
        if not DATABASE_URL:
            print("тЭМ ERROR: DATABASE_URL is not set.")
            return None
            
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except psycopg2.Error as e:
        # Render-ржПрж░ рж▓ржЧрзЗ рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНржерждрж╛рж░ ржХрж╛рж░ржг ржжрзЗржЦрж╛ржмрзЗред
        print(f"тЭМ Database connection error: {e}")
        return None
    except Exception as e:
        print(f"тЭМ An unexpected database error occurred: {e}")
        return None

# --- рзк. ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржлрж╛ржВрж╢ржи ---
def check_user(user_id, username=None, referrer_id=None):
    conn = get_db_connection()
    if conn is None:
        return None  # рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ None рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзБржи
    
    try:
        cur = conn.cursor()
        
        # ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзБржи
        cur.execute("SELECT user_id, earning_balance, referral_count FROM users WHERE user_id = %s", (user_id,))
        user_data = cur.fetchone()

        if user_data is None:
            # ржпржжрж┐ ржЗржЙржЬрж╛рж░ ржирж╛ ржерж╛ржХрзЗ, рждржмрзЗ ржирждрзБржи ржЗржЙржЬрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи
            cur.execute("""
                INSERT INTO users (user_id, username)
                VALUES (%s, %s)
            """, (user_id, username))
            conn.commit()
            
            # рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕ ржпрзЛржЧ ржХрж░рзБржи (ржпржжрж┐ referrer_id ржерж╛ржХрзЗ)
            if referrer_id:
                cur.execute(sql.SQL("""
                    UPDATE users SET referral_count = referral_count + 1, earning_balance = earning_balance + %s WHERE user_id = %s;
                """), (REFERRAL_BONUS, referrer_id))
                conn.commit()
                print(f"тЬЕ Referral bonus ({REFERRAL_BONUS} BDT) added to referrer ({referrer_id})")
                
            return {'new_user': True}
        
        # ржЗржЙржЬрж╛рж░ ржерж╛ржХрж▓рзЗ рждрж╛рж░ ржбрзЗржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзБржи
        return {
            'user_id': user_data[0],
            'earning_balance': user_data[1],
            'referral_count': user_data[2],
            'new_user': False
        }

    except psycopg2.Error as e:
        print(f"тЭМ Database operation error (check_user): {e}")
        return None
    except Exception as e:
        print(f"тЭМ An unexpected error occurred: {e}")
        return None
    finally:
        if conn:
            conn.close()

def get_user_data(user_id):
    conn = get_db_connection()
    if conn is None:
        return None
    
    try:
        cur = conn.cursor()
        cur.execute("SELECT user_id, earning_balance, referral_count, is_admin FROM users WHERE user_id = %s", (user_id,))
        data = cur.fetchone()
        
        if data:
            return {
                'user_id': data[0],
                'earning_balance': data[1],
                'referral_count': data[2],
                'is_admin': data[3]
            }
        return None
        
    except psycopg2.Error as e:
        print(f"тЭМ Database operation error (get_user_data): {e}")
        return None
    finally:
        if conn:
            conn.close()

# --- рзл. ржЯрж╛рж╕рзНржХ ржПржмржВ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржлрж╛ржВрж╢ржи ---
def get_daily_task_count(user_id):
    conn = get_db_connection()
    if conn is None:
        return 0
        
    try:
        cur = conn.cursor()
        today = datetime.now(pytz.timezone(TIMEZONE)).date()
        
        cur.execute("SELECT task_count FROM user_tasks WHERE user_id = %s AND task_date = %s", (user_id, today))
        data = cur.fetchone()
        
        return data[0] if data else 0
        
    except psycopg2.Error as e:
        print(f"тЭМ Database operation error (get_daily_task_count): {e}")
        return 0
    finally:
        if conn:
            conn.close()

def add_earning(user_id):
    conn = get_db_connection()
    if conn is None:
        return False
        
    try:
        cur = conn.cursor()
        today = datetime.now(pytz.timezone(TIMEZONE)).date()
        
        # 1. ржЯрж╛рж╕рзНржХ ржХрж╛ржЙржирзНржЯ ржЖржкржбрзЗржЯ
        cur.execute("""
            INSERT INTO user_tasks (user_id, task_date, task_count)
            VALUES (%s, %s, 1)
            ON CONFLICT (user_id, task_date)
            DO UPDATE SET task_count = user_tasks.task_count + 1;
        """, (user_id, today))
        
        # 2. ржЖрж░рзНржирж┐ржВ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ
        cur.execute(sql.SQL("""
            UPDATE users SET earning_balance = earning_balance + %s WHERE user_id = %s;
        """), (TASK_REWARD, user_id))
        
        conn.commit()
        return True
        
    except psycopg2.Error as e:
        print(f"тЭМ Database operation error (add_earning): {e}")
        return False
    finally:
        if conn:
            conn.close()

# --- рзм. ржмржЯ ржХржорж╛ржирзНржб ржПржмржВ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---

# рж╕рзНржЯрж╛рж░рзНржЯ ржХржорж╛ржирзНржб
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        referrer_id = None
        
        # рж░рзЗржлрж╛рж░рзЗрж▓ ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рзБржи (ржпржжрж┐ ржерж╛ржХрзЗ)
        if len(message.text.split()) > 1:
            try:
                referrer_id = int(message.text.split()[1])
                if referrer_id == user_id: # ржирж┐ржЬржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛
                    referrer_id = None
            except ValueError:
                referrer_id = None

        user_info = check_user(user_id, username, referrer_id)
        
        if user_info and user_info.get('new_user'):
            welcome_text = "рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ ржЖрж░рзНржирж┐ржВ ржмржЯрзЗрж░ ржПржХржЬржи ржирждрзБржи рж╕ржжрж╕рзНржпред\n\nржЖржкржирж┐ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржерж╛ржХрж▓рзЗ, ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ржХрж╛рж░рзАржХрзЗ тВ╣{} ржмрзЛржирж╛рж╕ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред".format(REFERRAL_BONUS)
        else:
            welcome_text = "рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржорзЗржирзБ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"

        # ржорзЗржЗржи ржорзЗржирзБ рждрзИрж░рж┐
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('ЁЯТ░ Earning')
        btn2 = telebot.types.KeyboardButton('ЁЯТ╕ Withdraw')
        btn3 = telebot.types.KeyboardButton('ЁЯСе Referral')
        btn4 = telebot.types.KeyboardButton('ЁЯУК Balance')
        markup.add(btn1, btn2, btn3, btn4)
        
        bot.send_message(user_id, welcome_text, reply_markup=markup)
        
    except Exception as e:
        print(f"тЭМ Error in handle_start: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")


# ржЖрж░рзНржирж┐ржВ ржмрж╛ржЯржи
@bot.message_handler(regexp='ЁЯТ░ Earning')
def handle_earning(message):
    try:
        user_id = message.from_user.id
        # ржЯрж╛рж╕рзНржХ рж▓ржЬрж┐ржХ ржПржЦрж╛ржирзЗ ржпрзБржХрзНржд рж╣ржмрзЗ
        
        # рж╕рж╣ржЬ ржЯрж╛рж╕рзНржХ: ржкрзНрж░рждрж┐ ржХрзНрж▓рж┐ржХрзЗ ржЯрж╛ржХрж╛ ржпрзЛржЧ
        if add_earning(user_id):
            balance = get_user_data(user_id)['earning_balance']
            response = f"тЬЕ рж╕ржлрж▓! ржЖржкржирж┐ тВ╣{TASK_REWARD:.2f} ржЯрж╛ржХрж╛ ржЙржкрж╛рж░рзНржЬржи ржХрж░рзЗржЫрзЗржиред\n\nржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: тВ╣{balance:.2f}"
        else:
            response = "тЭМ ржжрзБржГржЦрж┐ржд! ржЯрж╛рж╕рзНржХ ржпрзЛржЧ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            
        bot.send_message(user_id, response)
        
    except Exception as e:
        print(f"тЭМ Error in handle_earning: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")


# ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржмрж╛ржЯржи
@bot.message_handler(regexp='ЁЯУК Balance')
def handle_balance(message):
    try:
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        
        if user_data:
            balance = user_data['earning_balance']
            referrals = user_data['referral_count']
            
            response = f"ЁЯУК ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **тВ╣{balance:.2f}**\n\nЁЯСе ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛: **{referrals}** ржЬржи"
            bot.send_message(user_id, response, parse_mode='Markdown')
        else:
            bot.send_message(user_id, "тЭМ ржЖржкржирж╛рж░ рждржерзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржХржорж╛ржирзНржб ржжрж┐ржиред")
            
    except Exception as e:
        print(f"тЭМ Error in handle_balance: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")


# рж░рзЗржлрж╛рж░рзЗрж▓ ржмрж╛ржЯржи
@bot.message_handler(regexp='ЁЯСе Referral')
def handle_referral(message):
    try:
        user_id = message.from_user.id
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        
        response = f"ЁЯСе ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n`{referral_link}`\n\nржПржЗ рж▓рж┐ржВржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржХрзЗржЙ ржЬржпрж╝рзЗржи ржХрж░рж▓рзЗ ржЖржкржирж┐ тВ╣{REFERRAL_BONUS:.2f} ржЯрж╛ржХрж╛ ржмрзЛржирж╛рж╕ ржкрж╛ржмрзЗржиред"
        
        bot.send_message(user_id, response, parse_mode='Markdown')
        
    except Exception as e:
        print(f"тЭМ Error in handle_referral: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")

# ржЙржЗржержбрзНрж░ ржмрж╛ржЯржи
@bot.message_handler(regexp='ЁЯТ╕ Withdraw')
def handle_withdraw(message):
    try:
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        
        if user_data is None:
            return bot.send_message(user_id, "тЭМ ржЖржкржирж╛рж░ рждржерзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржХржорж╛ржирзНржб ржжрж┐ржиред")
            
        balance = user_data['earning_balance']
        
        if balance < MIN_WITHDRAWAL:
            response = f"тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржХржоржкржХрзНрж╖рзЗ тВ╣{MIN_WITHDRAWAL:.2f} ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрждрзЗ рж╣ржмрзЗред ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: тВ╣{balance:.2f}"
            return bot.send_message(user_id, response)
            
        # ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ ржЬрж╛ржирждрзЗ ржЪрж╛ржи
        msg = bot.send_message(user_id, "ЁЯТ╕ ржЖржкржирж┐ ржХржд ржЯрж╛ржХрж╛ ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ ржЪрж╛ржи? (рж╕рж░рзНржмржирж┐ржорзНржи тВ╣{}):".format(MIN_WITHDRAWAL))
        bot.register_next_step_handler(msg, handle_withdraw_amount)
        
    except Exception as e:
        print(f"тЭМ Error in handle_withdraw: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")

def handle_withdraw_amount(message):
    try:
        user_id = message.from_user.id
        amount = message.text
        
        try:
            amount = float(amount)
        except ValueError:
            msg = bot.send_message(user_id, "тЭМ ржЕржмрзИржз ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯред ржжржпрж╝рж╛ ржХрж░рзЗ рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:")
            return bot.register_next_step_handler(msg, handle_withdraw_amount)

        user_data = get_user_data(user_id)
        balance = user_data['earning_balance']

        if amount < MIN_WITHDRAWAL:
            msg = bot.send_message(user_id, f"тЭМ рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░ ржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ тВ╣{MIN_WITHDRAWAL:.2f}ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:")
            return bot.register_next_step_handler(msg, handle_withdraw_amount)
            
        if amount > balance:
            msg = bot.send_message(user_id, f"тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ ржпржерзЗрж╖рзНржЯ ржЯрж╛ржХрж╛ ржирзЗржЗред ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: тВ╣{balance:.2f}ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:")
            return bot.register_next_step_handler(msg, handle_withdraw_amount)
            
        # ржкрзЗржорзЗржирзНржЯ ржорзЗржержб ржЬрж╛ржирждрзЗ ржЪрж╛ржи
        msg = bot.send_message(user_id, "ЁЯПж ржЖржкржирж┐ ржХрзЛржи ржкрзЗржорзЗржирзНржЯ ржорзЗржержбрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ ржЪрж╛ржи? (ржпрзЗржоржи: ржмрж┐ржХрж╛рж╢, ржиржЧржж, рж░ржХрзЗржЯ):")
        bot.register_next_step_handler(msg, handle_withdraw_info, amount)
        
    except Exception as e:
        print(f"тЭМ Error in handle_withdraw_amount: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")

def handle_withdraw_info(message, amount):
    try:
        user_id = message.from_user.id
        method = message.text
        
        # ржкрзЗржорзЗржирзНржЯ рждржерзНржп (ржпрзЗржоржи: ржиржорзНржмрж░) ржЬрж╛ржирждрзЗ ржЪрж╛ржи
        msg = bot.send_message(user_id, f"ЁЯУ▒ ржЖржкржирж╛рж░ {method} ржиржорзНржмрж░ ржмрж╛ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи:")
        bot.register_next_step_handler(msg, handle_withdraw_finalize, amount, method)
        
    except Exception as e:
        print(f"тЭМ Error in handle_withdraw_info: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")

def handle_withdraw_finalize(message, amount, method):
    try:
        user_id = message.from_user.id
        info = message.text  # ржкрзЗржорзЗржирзНржЯ ржиржорзНржмрж░/ржЖржЗржбрж┐
        
        # ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рждрзИрж░рж┐ ржПржмржВ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ
        if create_withdrawal_request(user_id, amount, method, info):
            bot.send_message(user_id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржкрзЗржорзЗржирзНржЯ ржкрзЗржпрж╝рзЗ ржпрж╛ржмрзЗржиред")
            
            # ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржи
            admin_message = f"ЁЯФФ **ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ**\n\nржЗржЙржЬрж╛рж░ ID: `{user_id}`\nржЗржЙржЬрж╛рж░: @{message.from_user.username}\nржЕрзНржпрж╛ржорж╛ржЙржирзНржЯ: тВ╣{amount:.2f}\nржорзЗржержб: {method}\nржкрзЗржорзЗржирзНржЯ рждржерзНржп: {info}"
            bot.send_message(ADMIN_ID, admin_message, parse_mode='Markdown')
        else:
            bot.send_message(user_id, "тЭМ ржжрзБржГржЦрж┐ржд! ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржЬржорж╛ ржжрж┐рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            
    except Exception as e:
        print(f"тЭМ Error in handle_withdraw_finalize: {e}")
        bot.send_message(message.chat.id, "ржжрзБржГржЦрж┐ржд! ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред")

def create_withdrawal_request(user_id, amount, method, info):
    conn = get_db_connection()
    if conn is None:
        return False
        
    try:
        cur = conn.cursor()
        
        # 1. ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерзЗржХрзЗ ржЯрж╛ржХрж╛ ржХржорж╛ржирзЛ
        cur.execute(sql.SQL("""
            UPDATE users SET earning_balance = earning_balance - %s WHERE user_id = %s;
        """), (amount, user_id))
        
        # 2. рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржЯрзЗржмрж┐рж▓ ржПржирзНржЯрзНрж░рж┐
        cur.execute("""
            INSERT INTO withdrawal_requests (user_id, method, amount, payment_info)
            VALUES (%s, %s, %s, %s);
        """, (user_id, method, amount, info))
        
        conn.commit()
        return True
        
    except psycopg2.Error as e:
        print(f"тЭМ Database operation error (create_withdrawal_request): {e}")
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()


# --- рзн. ржмржЯ рж▓рзБржк ---
if __name__ == '__main__':
    print("тЬЕ Bot is polling...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"тЭМ Bot polling failed: {e}")

# --- End of bot.py ---
