import telebot
import psycopg2
import os
from datetime import datetime, timedelta
import pytz
from psycopg2 import sql

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
# ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ì ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá
# Render-‡¶è ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DATABASE_URL = os.environ.get('DATABASE_URL')
# ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
TASK_REWARD = 5.00  # ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá ‡ß´.‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ
DAILY_TASK_LIMIT = 5 # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡ß´‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
REFERRAL_BONUS = 10.00 # ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ßß‡ß¶.‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ
MIN_WITHDRAWAL = 100.00 # ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü
TIMEZONE = 'Asia/Dhaka' # ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶û‡ßç‡¶ö‡¶≤
ADMIN_ID = 8145444675 # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø
bot = telebot.TeleBot(BOT_TOKEN)
   """‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßá"""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        print(f"Database connection error: {e}")
        return None
 check_user(user_id, username=None, referrer_id=None):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá, ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    conn = get_db_connection()
    if conn is None: return

    cur = conn.cursor()
    try:
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï
        cur.execute("SELECT user_id, earning_balance, referral_count FROM users WHERE user_id = %s", (user_id,))
        user_data = cur.fetchone()

        if user_data is None:
            # ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø
            cur.execute("""
                INSERT INTO users (user_id, username) 
                VALUES (%s, %s)
            """, (user_id, username))
            conn.commit()
            
            # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶Ø‡ßã‡¶ó
            if referrer_id:
                cur.execute("""
                    UPDATE users SET referral_count = referral_count + 1, earning_balance = earning_balance + %s WHERE user_id = %s
                """, (REFERRAL_BONUS, referrer_id))
                conn.commit()
                print(f"Referral bonus {REFERRAL_BONUS} added to referrer {referrer_id}")

            return {'new_user': True}
        
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü (‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡ßü)
        cur.execute("UPDATE users SET username = %s WHERE user_id = %s", (username, user_id))
        conn.commit()

        return {'new_user': False, 'balance': user_data[1], 'referrals': user_data[2]}

    except Exception as e:
        print(f"Database operation error (check_user): {e}")
    finally:
        cur.close()
        conn.close()

def get_user_data(user_id):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶®‡ßá"""
    conn = get_db_connection()
    if conn is None: return None
    cur = conn.cursor()
    try:
        cur.execute("SELECT earning_balance, referral_count, is_admin FROM users WHERE user_id = %s", (user_id,))
        data = cur.fetchone()
        if data:
            return {'balance': data[0], 'referrals': data[1], 'is_admin': data[2]}
        return None
    finally:
        cur.close()
        conn.close()

def add_earning(user_id, amount, task_info=None):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ö‡¶∞‡ßç‡¶• ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá"""
    conn = get_db_connection()
    if conn is None: return False
    cur = conn.cursor()
    try:
        cur.execute("""
            UPDATE users SET earning_balance = earning_balance + %s, last_task_time = NOW() 
            WHERE user_id = %s RETURNING earning_balance
        """, (amount, user_id))
        conn.commit()
        new_balance = cur.fetchone()[0]
        return new_balance
    except Exception as e:
        print(f"Database operation error (add_earning): {e}")
        return False
    finally:
        cur.close()
        conn.close()

def get_daily_task_count(user_id, date):
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¶‡¶ø‡¶®‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶®‡ßá"""
    conn = get_db_connection()
    if conn is None: return DAILY_TASK_LIMIT + 1 # ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï limit ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
    cur = conn.cursor()
    try:
        cur.execute("SELECT task_count FROM user_tasks WHERE user_id = %s AND task_date = %s", (user_id, date))
        result = cur.fetchone()
        return result[0] if result else 0
    finally:
        cur.close()
        conn.close()

def update_daily_task_count(user_id, date):
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¶‡¶ø‡¶®‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶Ø‡¶º"""
    conn = get_db_connection()
    if conn is None: return
    cur = conn.cursor()
    try:
        # ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶¨‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡ßü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá
        cur.execute("""
            INSERT INTO user_tasks (user_id, task_date, task_count) 
            VALUES (%s, %s, 1)
            ON CONFLICT (user_id, task_date) 
            DO UPDATE SET task_count = user_tasks.task_count + 1
        """, (user_id, date))
        conn.commit()
    finally:
        cur.close()
        conn.close()

def create_withdrawal_request(user_id, amount, method, wallet_info):
    """‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶Æ‡¶æ‡ßü"""
    conn = get_db_connection()
    if conn is None: return False
    cur = conn.cursor()
    try:
        # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï
        cur.execute("SELECT earning_balance FROM users WHERE user_id = %s FOR UPDATE", (user_id,))
        current_balance = cur.fetchone()[0]

        if current_balance < amount:
            return "Insufficient balance"
        
        # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
        cur.execute("UPDATE users SET earning_balance = earning_balance - %s WHERE user_id = %s", (amount, user_id))

        # ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø
        cur.execute("""
            INSERT INTO withdrawal_requests (user_id, amount, method, wallet_info) 
            VALUES (%s, %s, %s, %s)
        """, (user_id, amount, method, wallet_info))

        conn.commit()
        return "Success"
    except Exception as e:
        print(f"Database operation error (withdrawal): {e}")
        conn.rollback()
        return "Error"
    finally:
        cur.close()
        conn.close()


# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
    referrer_id = None
    if message.text.startswith('/start '):
        try:
            referrer_id = int(message.text.split()[1])
        except (ValueError, IndexError):
            pass

    # ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶¨‡ßç‡¶≤‡¶ï
    if referrer_id == user_id:
        referrer_id = None

    result = check_user(user_id, username, referrer_id)
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ Earning", "üí∏ Withdraw")
    markup.add("üîó Refer & Earn", "üìä Balance")
    
    if result and result.get('new_user'):
        welcome_message = "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶∞‡ßç‡¶®‡¶ø‡¶Ç ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶è‡¶ï‡¶ú‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡•§\n\n‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    else:
        welcome_message = "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶è‡¶ñ‡¶® ‡¶∞‡ßá‡¶°‡¶ø‡•§ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

    bot.send_message(user_id, welcome_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üí∞ Earning")
def handle_earning(message):
    """'Earning' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶¶‡ßá‡ßü‡•§"""
    user_id = message.from_user.id
    dhaka_tz = pytz.timezone(TIMEZONE)
    today = datetime.now(dhaka_tz).date()

    # ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï
    task_count = get_daily_task_count(user_id, today)
    
    if task_count >= DAILY_TASK_LIMIT:
        bot.send_message(user_id, f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ **{DAILY_TASK_LIMIT} ‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü** ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡¶ø‡¶®", callback_data=f"complete_task_{user_id}_{today}"))
    
    task_message = f"‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú:\n\nüëâ **‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:** [Your Telegram Channel Link]\n\n‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ (‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï: {task_count}/{DAILY_TASK_LIMIT})"

    bot.send_message(user_id, task_message, reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith('complete_task_'))
def callback_complete_task(call):
    """‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = call.from_user.id
    
    # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    parts = call.data.split('_')
    if len(parts) != 3: # complete_task_user_id_YYYY-MM-DD
        bot.answer_callback_query(call.id, "‚ùå Invalid task data.")
        return

    dhaka_tz = pytz.timezone(TIMEZONE)
    today = datetime.now(dhaka_tz).date()
    
    # ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ö‡ßá‡¶ï
    task_count = get_daily_task_count(user_id, today)

    if task_count >= DAILY_TASK_LIMIT:
        bot.answer_callback_query(call.id, f"‚ùå ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {DAILY_TASK_LIMIT}‡¶ü‡¶ø‡•§")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üö´ **‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§**\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ({DAILY_TASK_LIMIT}‡¶ü‡¶ø) ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
            parse_mode="Markdown"
        )
        return

    # --- ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶´‡¶≤ ---
    update_daily_task_count(user_id, today)
    new_balance = add_earning(user_id, TASK_REWARD)
    
    if new_balance is not False:
        # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üéâ **‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**\n\n‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{TASK_REWARD:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\n‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ì‡ßü‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï: **{task_count + 1}/{DAILY_TASK_LIMIT}**",
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, f"‚úÖ ‡¶∏‡¶´‡¶≤! {TASK_REWARD:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    else:
        bot.answer_callback_query(call.id, "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")


@bot.message_handler(func=lambda message: message.text == "üìä Balance")
def handle_balance(message):
    """‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü‡•§"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data:
        balance = user_data['balance']
        referrals = user_data['referrals']
        
        balance_message = f"**üë§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:**\n\n"
        balance_message += f"üí∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**\n"
        balance_message += f"üîó ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤: **{referrals} ‡¶ú‡¶®**"
        
        bot.send_message(user_id, balance_message, parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")


@bot.message_handler(func=lambda message: message.text == "üîó Refer & Earn")
def handle_referral(message):
    """‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = message.from_user.id
    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    
    referral_message = f"**‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶â‡¶™‡¶æ‡¶∞‡ßç‡¶ú‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!**\n\n"
    referral_message += f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:\n`{referral_link}`\n\n"
    referral_message += f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶æ‡¶ï‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®, ‡¶∏‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø **{REFERRAL_BONUS:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡¶æ‡¶¨‡ßá‡¶®!"
    
    bot.send_message(user_id, referral_message, parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "üí∏ Withdraw")
def handle_withdraw_start(message):
    """‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        bot.send_message(user_id, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    balance = user_data['balance']
    
    if balance < MIN_WITHDRAWAL:
        bot.send_message(user_id, f"‚ùå **‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§**\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**‡•§\n‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶π‡¶≤‡ßã: **{MIN_WITHDRAWAL:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**‡•§")
        return

    # ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡¶æ‡¶ü‡¶®
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("Bkash", "Nagad", "Rocket")
    
    msg = bot.send_message(user_id, f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°** ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=markup, parse_mode="Markdown")
    
    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶∏‡ßá‡¶ü
    bot.register_next_step_handler(msg, handle_withdraw_amount)

def handle_withdraw_amount(message):
    """‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = message.from_user.id
    method = message.text
    
    if method not in ["Bkash", "Nagad", "Rocket"]:
        # ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶•‡¶° ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡ßü
        bot.send_message(user_id, "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°‡•§ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶¨‡¶æ‡¶∞ 'üí∏ Withdraw' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    user_data = get_user_data(user_id)
    balance = user_data['balance']

    msg = bot.send_message(user_id, f"‡¶Ü‡¶™‡¶®‡¶ø **{method}** ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? (‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® {MIN_WITHDRAWAL:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ)\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**‡•§", parse_mode="Markdown")
    
    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶∏‡ßá‡¶ü: ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü
    bot.register_next_step_handler(msg, handle_withdraw_wallet_info, method)

def handle_withdraw_wallet_info(message, method):
    """‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü/‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ö‡¶æ‡ßü‡•§"""
    user_id = message.from_user.id
    amount_text = message.text
    
    try:
        amount = float(amount_text)
        if amount < MIN_WITHDRAWAL:
            bot.send_message(user_id, f"‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® **{MIN_WITHDRAWAL:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return
    except ValueError:
        bot.send_message(user_id, "‚ùå ‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    
    # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶ï
    user_data = get_user_data(user_id)
    balance = user_data['balance']
    
    if amount > balance:
        bot.send_message(user_id, f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶®‡ßá‡¶á‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**‡•§")
        return

    msg = bot.send_message(user_id, f"‡¶Ü‡¶™‡¶®‡¶ø **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§\n\n‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{method} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø** ‡¶¶‡¶ø‡¶®:", parse_mode="Markdown")
    
    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶∏‡ßá‡¶ü: ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü ‡¶á‡¶®‡¶´‡ßã
    bot.register_next_step_handler(msg, handle_withdraw_finalize, method, amount)

def handle_withdraw_finalize(message, method, amount):
    """‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶ï‡¶∞‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = message.from_user.id
    wallet_info = message.text.strip()
    
    # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ü‡¶®‡¶æ
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ Earning", "üí∏ Withdraw")
    markup.add("üîó Refer & Earn", "üìä Balance")
    
    result = create_withdrawal_request(user_id, amount, method, wallet_info)
    
    if result == "Success":
        success_message = f"‚úÖ **‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤!**\n\n"
        success_message += f"‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü: **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**\n"
        success_message += f"‡¶Æ‡ßá‡¶•‡¶°: **{method}**\n"
        success_message += f"‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü: **{wallet_info}**\n\n"
        success_message += "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶∞‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶è‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§"
        bot.send_message(user_id, success_message, reply_markup=markup, parse_mode="Markdown")
        
        # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®
        bot.send_message(ADMIN_ID, f"üîî **‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü!**\n\nUser ID: {user_id}\nUsername: @{message.from_user.username or 'N/A'}\nAmount: {amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ\nMethod: {method}\nWallet: {wallet_info}\n\n‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§", parse_mode="Markdown")
        
    elif result == "Insufficient balance":
        bot.send_message(user_id, "‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ö‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§‡•§", reply_markup=markup)
    else:
        bot.send_message(user_id, "‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", reply_markup=markup)

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° (ADMIN COMMANDS) ---

@bot.message_handler(commands=['admin'])
def handle_admin_start(message):
    """‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data or not user_data.get('is_admin'):
        bot.send_message(user_id, "üö´ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìù Pending Withdrawals", "üìä All Users Data")
    
    bot.send_message(user_id, "üõ†Ô∏è **‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤**", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "üìù Pending Withdrawals")
def handle_pending_withdrawals(message):
    """‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data or not user_data.get('is_admin'): return

    conn = get_db_connection()
    if conn is None: return bot.send_message(user_id, "‚ùå DB Connection Error.")
    cur = conn.cursor()
    
    try:
        cur.execute("""
            SELECT w.id, w.user_id, u.username, w.amount, w.method, w.wallet_info, w.request_date
            FROM withdrawal_requests w
            JOIN users u ON w.user_id = u.user_id
            WHERE w.status = 'Pending'
            ORDER BY w.request_date ASC
        """)
        requests = cur.fetchall()
        
        if not requests:
            bot.send_message(user_id, "üéâ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§")
            return
            
        for req in requests:
            req_id, req_user_id, username, amount, method, wallet, date = req
            
            # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton("‚úÖ Paid", callback_data=f"set_paid_{req_id}_{req_user_id}"),
                telebot.types.InlineKeyboardButton("‚ùå Rejected", callback_data=f"set_rejected_{req_id}_{req_user_id}")
            )
            
            req_msg = f"**üÜî R-ID: {req_id}** (User: {req_user_id})\n"
            req_msg += f"üë§ Username: @{username or 'N/A'}\n"
            req_msg += f"üí∞ Amount: **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ**\n"
            req_msg += f"üí≥ Method: {method} ({wallet})\n"
            req_msg += f"‚è∞ Date: {date.strftime('%Y-%m-%d %H:%M')}"
            
            bot.send_message(user_id, req_msg, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        bot.send_message(user_id, f"‚ùå Error fetching requests: {e}")
    finally:
        cur.close()
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_'))
def callback_set_withdrawal_status(call):
    """‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§"""
    admin_id = call.from_user.id
    user_data = get_user_data(admin_id)
    if not user_data or not user_data.get('is_admin'):
        bot.answer_callback_query(call.id, "üö´ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
        
    parts = call.data.split('_')
    action = parts[1] # paid ‡¶¨‡¶æ rejected
    req_id = int(parts[2])
    req_user_id = int(parts[3])
    
    new_status = 'Paid' if action == 'paid' else 'Rejected'
    
    conn = get_db_connection()
    if conn is None: 
        bot.answer_callback_query(call.id, "‚ùå DB Connection Error.")
        return
    cur = conn.cursor()

    try:
        cur.execute("""
            UPDATE withdrawal_requests SET status = %s WHERE id = %s RETURNING amount, user_id
        """, (new_status, req_id))
        result = cur.fetchone()
        
        if result:
            amount, user_id_ret = result
            conn.commit()
            
            # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®
            if new_status == 'Paid':
                msg_to_user = f"‚úÖ **‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∏‡¶´‡¶≤!**\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ** ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!"
            else:
                # Reject ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
                cur.execute("UPDATE users SET earning_balance = earning_balance + %s WHERE user_id = %s", (amount, req_user_id))
                conn.commit()
                msg_to_user = f"‚ùå **‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤‡•§**\n\n‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **{amount:.2f} ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞** ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"

            bot.send_message(req_user_id, msg_to_user, parse_mode="Markdown")
            
            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"{call.message.text}\n\n**-- ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü: {new_status} --**",
                parse_mode="Markdown"
            )
            bot.answer_callback_query(call.id, f"‚úÖ Request {req_id} set to {new_status}.")
        else:
            bot.answer_callback_query(call.id, "‚ùå Request ID not found.")

    except Exception as e:
        conn.rollback()
        bot.answer_callback_query(call.id, f"‚ùå Error updating status: {e}")
    finally:
        cur.close()
        conn.close()

# --- ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ---
if __name__ == '__main__':
    # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ü‡¶ø ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® (‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç‡ßü‡ßá)
    # Pydroid 3-‡¶è ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶¨‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç‡ßü‡ßá ‡¶†‡¶ø‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    from db_setup import setup_database
    setup_database() 
    
    print("Bot is polling...")
    bot.infinity_polling()
